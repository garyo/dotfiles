[user]
	name = Gary Oberbrunner
	email = garyo@darkstarsystems.com
[pretty]
	twolines = tformat:%C("#aaaaaa ul")%h%C(reset) %an, %cr: %d%n. . . . %C(yellow)%w(70,0,8)%s%C(reset)
[alias]
	ll = log -10 --graph --date-order --format=twolines
        ogl = !ogl --all
	tube = log --graph --format=oneline --abbrev-commit --decorate --color
	tags = for-each-ref --sort=taggerdate --format '%(taggerdate:short)%09%(tag)' 'refs/tags'
	alias = config --get-regexp 'alias.*'
	ff = merge --ff-only @{u}
	outgoing = log --format=\"%aD: %aN [%h]%n  %C(yellow)%s%C(reset)\"  @{u}..HEAD
	outgoing-all = log --format=twolines  --branches --not --remotes
	incoming = !git fetch && git log ..@{u}
	ga-merge = merge --no-commit --no-ff --log=9999
	lg1 = log --graph --date-order --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(black)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold red)%d%C(reset)' --all
	lg2 = log --graph --date-order --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold red)%d%C(reset)%n''          %C(black)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	# Show the latest ancestor of HEAD that's on a different branch; that's usually where this branch branched from.
	# May only work if this branch is not merged, e.g. a topic branch.
	branch-base = !git show-branch -a 2>/dev/null | grep '^[ +-]*\\*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | perl -pe 's/.*?\\[(.*?)\\].*/\\1/'
	current-branch = rev-parse --abbrev-ref HEAD
	accept-ours = "!f() { git checkout --ours -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
	accept-theirs = "!f() { git checkout --theirs -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
	summary = !"git status -s -b --untracked-files=no; echo "$(tput setaf 1)*** OUTGOING:$(tput sgr0)"; git outgoing -n2; echo "$(tput setaf 2)*** HEAD:$(tput sgr0)"; git show --format='%ad%n  %ar [%h]: %aN%n  %s' --quiet HEAD; git stash list; echo "$(tput setaf 5)*** UNPUSHED:$(tput sgr0)"; git ll --branches --not --remotes"
	# Summarize a single commit, e.g. to reference it somewhere
	summarize=show --format='%h \"%s\"' --quiet
	# Show recent branches, in a nice format
 	branches=for-each-ref --sort=-authordate --format='%(authordate:short) %(color:blue)%(refname:short) %(color:yellow)%(upstream:track)%0a   ...%(color:red)%(subject)' refs/heads

        # Ignore certain files/dirs locally -- useful for JS projects that check in builds
        ignore=update-index --skip-worktree
        unignore=update-index --no-skip-worktree
        ignored=!git ls-files -v | grep "^S"
        # quick status: one line per file, ignore untracked
        st=status -s -uno
        amend-quick=commit --amend --no-edit
        dc=diff --cached
        top=rev-parse --show-toplevel
        # Show complete short status of all files, even ignored
        file-status="!f() { cd -- ${GIT_PREFIX:-.}; sorted=$(printf '%s\\n' $(realpath --relative-to $(pwd) $@) | sort); for f in $sorted; do st=$(git status -s \"$f\"); lsf=$(git ls-files \"$f\"); if [ -n \"$st\" ]; then echo \"$st\"; elif [ -n \"$lsf\" ]; then echo \"   $lsf\"; else echo \"?? $f\"; fi; done }; f"
        # Git add with fuzzy matching courtesy of fzf:
        fza = "!git status --porcelain | fzf -m | cut -c4- | (cd $(git rev-parse --show-toplevel); xargs -d\\\\n -t -o git add)"
        # Branch-switching history from reflog:
        hist = !"git reflog | grep 'checkout:' | head -n10 | perl -ne 'if ($_ =~ m/checkout: moving from ([^ ]*)/) {print \"$.: $1\n\"}'"
        s1 = switch @{-1}
        s2 = switch @{-2}
        s3 = switch @{-3}
        s4 = switch @{-4}
        s5 = switch @{-5}
        s6 = switch @{-6}
        s7 = switch @{-7}
        s8 = switch @{-8}
        s9 = switch @{-9}
        s10 = switch @{-10}
        # Switch to branch with fzf:
        sw = !git checkout $(git branch -a --format '%(refname:short)' | sed 's~origin/~~' | sort | uniq | fzf)

[gui]
	fontdiff = -family \"Droid Sans Mono Dotted\" -size 10 -weight normal -slant roman -underline 0 -overstrike 0
	warndetachedcommit = true
	encoding = utf-8

[push]
	default = current
        # when pushing, push all annotated tags
        followTags = true
[diff]
	renamelimit = 0
	renames = copies
	tool = kdiff3
	guitool = kdiff3
	submodule = log
[merge]
	tool = kdiff3
	conflictStyle = diff3
[core]
	editor = emacsclient -c -a \"\"
	preloadindex = true
	fscache = true
	autocrlf = false ### (this is best left unset or false; no CRLF conversion at all)
        # Use per-repo .gitattributes instead!
        pager = command -v delta > /dev/null && delta --theme 'Monokai Extended' --file-color="#00ffff" --plus-color="#004400" --hunk-color="#00ffff" || less
	excludesfile = ~/.gitignore
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[mergetool]
	prompt = false
[status]
	# magit needs this even though it's the default,
	# otherwise it recursively shows all untracked files (which can be slow).
	showUntrackedFiles = normal
	submoduleSummary = true
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[include]
        # Include machine-local gitconfig, e.g. for Windows/Mac tool paths
        path = .gitconfig-local
[rerere]
	enabled = true
[fetch]
	writecommitgraph = false
        recurseSubmodules = on-demand
[gc]
	writeCommitGraph = false
[pull]
	ff = only
[init]
	defaultBranch = main
